x canary test
x a dead cell with zero neighbors stays dead
x a dead cell with one neighbors stays dead
x a dead cell with two neighbors stays dead
x a dead cell with five neighbors stays dead
x a dead cell with eight neighbors stays dead
x a dead cell with three neighbors comes to life
x a live cell with one live neighbors dies
x a live cell with four live neighbors dies
x a live cell with eight live neighbors dies
x a live cell with two live neighbors lives
x a live cell with three live neighbors lives

x given a live cell at position 2, 3, it generates eight signals for positions (1, 2), (1, 3), (1, 4), (2, 2), (2, 4), (3, 2), (3, 3), (3, 4)
x given a live cell at position 3, 3, it generates eight signals for positions (2, 2), (2, 3), (2, 4), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)
x given a live cell at positions 2, 4 it generates eight signals for positions (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 3), (3, 4), (3, 5)
x given a live cell at position 0, 0 it generates eight signals for positions (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)
x given no position, generateSignalsForMultiplePositions returns an empty list
x given one position, generateSignalsForMultiplePositions returns eight positions
x given two positions, generateSignalsForMultiplePositions returns sixteen positions
x given three positions, generateSignalsForMultiplePositions returns twenty four positions

x given no positions, count_signals returns an empty Map
x given one positions, count_signals returns a Map with that position as key and value 1
x given two of the same positions, count_signals returns a Map with that positions as key and value 2
x given three positions, first and the third being the same, count_signals returns a Map with two keys. The value for one is 1 and the value for the other is 2

x given no positions, next_generation returns an empty list
x given one position, next_generation returns an empty list
x given positions (2, 3) and (2, 4), next_generation returns an empty list
x given positions (1, 1), (1, 2), and (3, 0), next_generation returns a list with one position (2, 1)
x given positions (1, 1), (1, 2), and (2, 2), next_generation returns a list with positions (1, 1), (1, 2), (2, 1), (2, 2)
x given Block, next_generation returns the same block
x given Beehive, next_generation returns the same Beehive
x given horizontal blinker, next_generation returns vertical blinker
x given vertical blinker, next_generation returns horizontal blinker
x given glider with one live cell on the top, next_generation returns proper result with that cell moving to the right 

x give an empty list, getBounds returns an empty list
x given one point, getBounds returns a list with the same point appearing twice
x given two points, getBounds returns a list with both the points in it, with the left top point first and the right bottom point next
x given three points, getBounds returns a list with two points, first being top left and the second being bottom right
x given four different points (none from the previous tests)
